#!/bin/bash

git clone https://github.com/alekseyagaltsov/devops.git
git status
git checkout -b feature/database-connection #create new branch

Базовые операции:
git init [название проекта]             #Создание репозитория в текущей директории
git clone [url-адрес]                   #Скачать удаленный репозиторий

Синхронизация с удаленным репозиторием:
git fetch [удалённый репозиторий]       #Скачивает историю из удалённого репозитория
git push [удалённый репозиторий] [ветка] #Загружает все изменения локальной ветки в удалённый репозиторий
git pull                                #Загружает историю из удалённого репозитория и объединяет её с локальной. pull = fetch + merge

Внесение изменений:
git status                              #Перечисляет все новые или изменённые файлы, которые нуждаются в фиксации в индексе
git add [файл]                          #Добавляем файлы в Index
git rm [файл]                           #Удаляет файл из рабочей директории и индексирует его удаление
git rm --cached [файл]                  #Убирает файл из контроля версий, но физически оставляет его на своём месте
git mv [оригинальный файл] [новое имя]  #Перемещает или переименовывает файл, сразу индексируя его для последующего коммита
git diff                                #Показывает различия по внесённым изменениям в ещё не проиндексированных файлах
git diff --staged                       #Показывает различия между проиндексированной и последней зафиксированной версиями файлов
git log --follow [файл]                 #История изменений конкретного файла

Комиты:
git commit -m "[описание комита]"       #Фиксирует проиндексированные изменения и сохраняет их в историю версий
git commit –amend -m "новое описание к комиту" #Изменение сообщения последнего комита
git log                                 #Просмотр изменений(комитов) проекта
git show [номер комита]                 #Выводит информацию и показывает изменения в выбранном коммите
git reset [номер коммита]               #Отменяет все коммиты после заданного, оставляя все изменения в рабочей директории
git reset --hard [коммит]               #Сбрасывает всю историю вместе с состоянием рабочей директории до указанного коммита.
git log --graph --oneline --stat        #Просмотр изменений (коммитов) проекта виде графа

Ветвления:
git branch                              #Список веток коммитов
git branch [имя ветки]                  #Создать новую ветку
git checkout [имя ветки]                #Переключиться на выбранную ветку
git branch -d [имя ветки]               #Удалить выбранную ветку
git branch –m [cтарое_название_ветки] [новое_название_ветки] #Переименование ветки
git merge [имя ветки]                   #Удалить ветку на сервере
